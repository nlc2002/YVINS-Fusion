%YAML:1.0
---
# common parameters
# support: 1 imu 1 cam; 1 imu 2 cam: 2 cam;
imu: 1
num_of_cam: 1

imu_topic: "/imu_raw"
image0_topic: "/kitti/camera_gray_left/image_raw"
image1_topic: "/kitti/camera_gray_right/image_raw"
output_path: "/home/nlc20/output/"
yolo_topic: "/yolo"
mask_topic: "/mask"
yolo_freq: 5        # Hz
yolo_threshold: 0.35
yolo_show: 1        # publish yolo image as topic

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam1_pinhole.yaml"
image_width: 1242
image_height: 375

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.000998747016377, 0.008416901274197, 0.999964108285479, 1.083301977719628,
          -0.999990478045969, -0.004250823535081, 0.001034553653565, -0.309888900800320,
          0.004259376261004, -0.999955514625927, 0.008412575801457, 0.729919794891583,
          0, 0, 0, 1]

#    0.000998747016377   0.008416901274197   0.999964108285479   1.083301977719628
#   -0.999990478045969  -0.004250823535081   0.001034553653565  -0.309888900800320
#    0.004259376261004  -0.999955514625927   0.008412575801457   0.729919794891583
#                    0                   0                   0   1.000000000000000

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.000998748963436, 0.008416900915355, 0.999964053843805, 1.083838479087175,
          -0.999990469697041, -0.004250828280738, 0.001034555238446, -0.847051453316365,
          0.004259378660306, -0.999955567612509, 0.008412575362252, 0.732207795392373,
          0, 0, 0, 1]
# T_r2i_rect =

#    0.000998748963436   0.008416900915355   0.999964053843805   1.083838479087175
#   -0.999990469697041  -0.004250828280738   0.001034555238446  -0.847051453316365
#    0.004259378660306  -0.999955567612509   0.008412575362252   0.732207795392373
#                    0                   0                   0   1.000000000000000

# Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.08  # max solver itration time (s), to guarantee real time
max_num_iterations: 10   # max solver itrations, to guarantee real time
keyframe_parallax: 15 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 1.0e-4       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
